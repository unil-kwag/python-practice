import numpy as np
import pandas as pd
import tensorflow as tf
import keras

import random
import requests
import minmaxscaler

df = np.arange(5)
df

df1 = np.arange(10)
df1

df2 = np.arange(15)
df2

df + df1 + df2

# 퍼셉트론 분류기
class Perceptron(object):
def __init__(self, eta=0.02, n_iter=50, random_state=1):
  self.eta=eta
  self.n_iter = n_iter
  self.random_state = random_state 
  
# 퍼셉트론 분류기2
class Perceptron1(object):
def __init__(self, eta=0.02, n_iter=50, random_state=1):
  self.eta=eta
  self.n_iter = n_iter
  self.random_state1 = random_state

# 경사하강법
from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
sc.fit(X_train)
X_train_std = sc.transform(X_train)
X_test_Std = sc.transform(X_test)

# def fit model
def fit(self, X, y):
rgen = np.random.RandomState*self.random_state)
self.w_=rgen.normal(loc=0.0,scale=0.01,
                    size=1+X.shape[1]

# 연습1
def fit1(self, X, y):
  x = np.arange(5)
# 연습 2
def fit2(self, X, y):
  x = np.arange(6)
# 연습 3
def fit3(self, X, y):
  x = np.arange(7)
  y = np.arange(4)

# 연습 4
def fit4(self, X, y):
  x = np.arange(9)
  y = np.arange(7)

# 연습 5
def fit5(self, X, y):
  x = np.arange(12)
  y = np.arange(7)

# 연습 6
def fit5(self,X,y)
  x = np.arange(1)
  y = np.arange(2)

# 알고리즘 학습 1 
x = f + g
y = h + i
z = k
